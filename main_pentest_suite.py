import sys
import warnings
from datetime import datetime

# Importar los scripts de los 3 requerimientos
# Asegúrate de que los nombres de los archivos coincidan con estos
try:
    from recon_scanner import main as recon_main
    from service_enumerator import main as enum_main
    from web_vuln_scanner import main as vuln_main
except ImportError as e:
    print(f"Error al importar un módulo. Asegúrate de que los archivos .py están en la misma carpeta. Detalles: {e}")
    sys.exit(1)

class Tee:
    """
    Clase que duplica la salida de la consola a un archivo y a la consola original.
    """
    def __init__(self, stream1, stream2):
        self.stream1 = stream1
        self.stream2 = stream2

    def write(self, data):
        self.stream1.write(data)
        self.stream2.write(data)
        self.flush()

    def flush(self):
        self.stream1.flush()
        self.stream2.flush()

def run_all_scans():
    """
    Función principal que orquesta la ejecución de los 3 scripts y guarda los resultados en un archivo.
    """
    # Generar un nombre de archivo único con la marca de tiempo
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    report_filename = f"results-{timestamp}.txt"
    
    # Redirigir la salida estándar al archivo y a la consola
    original_stdout = sys.stdout
    with open(report_filename, 'w') as f:
        sys.stdout = Tee(f, original_stdout)
        
        # Iniciar la suite de escaneo
        print("=====================================================")
        print("=== Suite de Hacking Ético Automatizada v1.0      ===")
        print("=====================================================")
        print(f"\n[+] Iniciando el flujo de un test de penetración. Resultados se guardarán en '{report_filename}'")
        
        # --- 1. Requerimiento 1: Reconocimiento ---
        print("\n-----------------------------------------------------")
        print("--- FASE 1: RECONOCIMIENTO DE SUPERFICIE DE ATAQUE  ---")
        print("-----------------------------------------------------\n")
        try:
            recon_main()
        except Exception as e:
            print(f"\n[!] Error en la fase de Reconocimiento: {e}")
            print("[!] Saliendo de la suite...")
            
        # --- 2. Requerimiento 2: Enumeración de Servicios ---
        print("\n-----------------------------------------------------")
        print("--- FASE 2: ENUMERACIÓN DE SERVICIOS                ---")
        print("-----------------------------------------------------\n")
        try:
            enum_main()
        except Exception as e:
            print(f"\n[!] Error en la fase de Enumeración: {e}")
            print("[!] Saliendo de la suite...")
            
        # --- 3. Requerimiento 3: Explotación de Vulnerabilidades Web ---
        print("\n-----------------------------------------------------")
        print("--- FASE 3: EXPLOTACIÓN DE VULNERABILIDADES WEB     ---")
        print("-----------------------------------------------------\n")
        try:
            vuln_main()
        except Exception as e:
            print(f"\n[!] Error en la fase de Explotación: {e}")
            print("[!] Saliendo de la suite...")

        print("\n=====================================================")
        print("=== Suite de Hacking Ético finalizada             ===")
        print("=====================================================")

    # Restaurar la salida estándar
    sys.stdout = original_stdout
    print(f"\n[+] Resultados de la suite guardados exitosamente en el archivo: {report_filename}")
    
if __name__ == "__main__":
    run_all_scans()